// src/main/services/browser-manager.ts
import { BrowserWindow, WebContentsView, WebContents } from 'electron';
import { join } from 'path';
import { WebContentsResult } from '../../shared/types/ipc';

export class BrowserManager {
  private mainWindow: BrowserWindow;
  private contentView: WebContentsView | null = null;
  private monitoringScript: string;

  constructor(mainWindow: BrowserWindow) {
    this.mainWindow = mainWindow;
    this.monitoringScript = this.loadMonitoringScript();
  }

  private loadMonitoringScript(): string {
    return `
      if (!window.__monitoringActive) {
        window.__monitoringActive = true;
        
        // XHR Monitoring
        const originalXHR = window.XMLHttpRequest.prototype.open;
        const originalSend = window.XMLHttpRequest.prototype.send;

        window.XMLHttpRequest.prototype.open = function(method, url) {
          this._method = method;
          this._url = url;
          this._requestHeaders = {};
          
          const originalSetRequestHeader = this.setRequestHeader;
          this.setRequestHeader = function(name, value) {
            this._requestHeaders[name] = value;
            return originalSetRequestHeader.apply(this, arguments);
          };

          return originalXHR.apply(this, arguments);
        };

        window.XMLHttpRequest.prototype.send = function(data) {
          const startTime = performance.now();
          let requestData = null;

          if (this._method === 'POST' && data) {
            try {
              requestData = String(data).substring(0, 1000);
            } catch (e) {}
          }

          this.addEventListener('load', () => {
            try {
              const metrics = {
                type: 'xhr',
                url: String(this._url),
                method: String(this._method),
                status: Number(this.status),
                timestamp: new Date().toISOString(),
                duration: Math.round(performance.now() - startTime),
                requestHeaders: this._requestHeaders,
                requestData: requestData
              };

              window.monitorAPI.sendMetrics(metrics);
            } catch (error) {}
          }, { once: true });

          return originalSend.apply(this, arguments);
        };

        // Resource Monitoring
        function checkAndSendResource(entry) {
          if (entry.name.includes('paypal') || entry.name.includes('braintree')) {
            window.monitorAPI.sendMetrics({
              type: 'resource',
              resourceType: entry.initiatorType,
              url: entry.name,
              timestamp: new Date().toISOString()
            });
          }
        }

        performance.getEntriesByType('resource').forEach(checkAndSendResource);

        const observer = new PerformanceObserver((list) => {
          list.getEntries().forEach(checkAndSendResource);
        });

        observer.observe({ entryTypes: ['resource'] });
      }
    `;
  }

  private async updateContentViewBounds(): Promise<void> {
    if (!this.contentView) return;

    const controlsHeight = await this.mainWindow.webContents.executeJavaScript(
      'document.getElementById("session-controls").offsetHeight'
    );

    const bounds = this.mainWindow.getBounds();
    this.contentView.setBounds({
      x: 0,
      y: controlsHeight + 20,
      width: bounds.width - 300,
      height: bounds.height - (controlsHeight + 20)
    });
  }

  async createWebContents(url: string): Promise<WebContentsResult> {
    try {
      if (this.contentView) {
        this.contentView.webContents.destroy();
      }

      this.contentView = new WebContentsView({
        webPreferences: {
          nodeIntegration: false,
          contextIsolation: true,
          preload: join(__dirname, '..', '..', 'preload', 'monitoring-bridge.js')
        }
      });

      this.mainWindow.addBrowserView(this.contentView);
      await this.updateContentViewBounds();

      const sanitizedUrl = !url.startsWith('http') ? `https://${url}` : url;
      await this.contentView.webContents.loadURL(sanitizedUrl);

      this.setupWebContentsHandlers(this.contentView.webContents);

      return { success: true, id: this.contentView.webContents.id };
    } catch (error) {
      return { error: (error as Error).message };
    }
  }

  private setupWebContentsHandlers(webContents: WebContents): void {
    webContents.setWindowOpenHandler(({ url }) => {
      webContents.loadURL(url);
      return { action: 'deny' };
    });

    webContents.on('did-navigate', (_, url) => {
      this.mainWindow.webContents.send('page-navigated', url);
    });

    webContents.on('did-navigate-in-page', (_, url) => {
      this.mainWindow.webContents.send('page-navigated', url);
    });

    webContents.on('did-finish-load', () => {
      webContents.executeJavaScript(this.monitoringScript);
    });
  }

  async endSession(): Promise<{ success: boolean }> {
    if (this.contentView) {
      this.contentView.webContents.destroy();
      this.contentView = null;
    }
    return { success: true };
  }
}
