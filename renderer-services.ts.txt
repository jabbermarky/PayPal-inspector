// src/renderer/services/session-manager.ts
import { Session, Page, XHRRequest, ResourceEntry, SDKEntry } from '../../shared/types/session';

export class SessionManager {
  private currentSession: Session | null = null;

  async startSession(name: string, description: string, startUrl: string): Promise<void> {
    if (!name || !description || !startUrl) {
      throw new Error('Missing required session fields');
    }

    this.currentSession = {
      id: Date.now(),
      name,
      description,
      startUrl,
      startTime: new Date().toISOString(),
      pages: []
    };

    const result = await window.electronAPI.createWebContents(startUrl);
    if (result.error) throw new Error(result.error);

    this.addNewPage(startUrl);
  }

  async endSession(): Promise<void> {
    if (!this.currentSession) return;
    await window.electronAPI.endSession();
    this.currentSession = null;
  }

  addNewPage(url: string): void {
    if (!this.currentSession) return;

    const page: Page = {
      url,
      visitTime: new Date().toISOString(),
      metrics: {
        xhrRequests: [],
        resources: {
          scripts: [],
          images: []
        },
        sdks: {
          sdks: [],
          tracking: []
        }
      }
    };

    this.currentSession.pages.push(page);
  }

  updateMetrics(data: XHRRequest | ResourceEntry): void {
    if (!this.currentSession) return;
    const currentPage = this.currentSession.pages[this.currentSession.pages.length - 1];
    if (!currentPage) return;

    if (data.type === 'xhr') {
      currentPage.metrics.xhrRequests.push(data);
    } else {
      if (data.resourceType === 'script') {
        currentPage.metrics.resources.scripts.push(data);
      } else if (data.resourceType === 'img') {
        currentPage.metrics.resources.images.push(data);
      }
    }
  }

  updateSDK(sdk: SDKEntry): void {
    if (!this.currentSession) return;
    const currentPage = this.currentSession.pages[this.currentSession.pages.length - 1];
    if (!currentPage) return;

    if (sdk.name.includes('Tracking') || sdk.name.includes('Analytics')) {
      if (!currentPage.metrics.sdks.tracking.some(s => s.url === sdk.url)) {
        currentPage.metrics.sdks.tracking.push(sdk);
      }
    } else {
      if (!currentPage.metrics.sdks.sdks.some(s => s.url === sdk.url)) {
        currentPage.metrics.sdks.sdks.push(sdk);
      }
    }
  }

  getCurrentSession(): Session | null {
    return this.currentSession;
  }
}

// src/renderer/services/ui-state.ts
export class UIStateManager {
  private controlsDisabled: boolean = false;

  updateControls(sessionActive: boolean): void {
    this.controlsDisabled = sessionActive;
    ['session-name', 'session-description', 'start-url', 'start-session'].forEach(id => {
      const element = document.getElementById(id);
      if (element) (element as HTMLInputElement).disabled = sessionActive;
    });
    
    const endButton = document.getElementById('end-session');
    if (endButton) (endButton as HTMLInputElement).disabled = !sessionActive;
  }

  formatUrl(urlString: string): { domain: string; path: string; query: string } {
    try {
      const url = new URL(urlString);
      return {
        domain: url.hostname,
        path: url.pathname === '/' ? '' : url.pathname,
        query: url.search
      };
    } catch {
      return {
        domain: urlString,
        path: '',
        query: ''
      };
    }
  }

  formatData(data: string): string {
    try {
      const parsed = JSON.parse(data);
      return JSON.stringify(parsed, null, 2);
    } catch {
      if (data.includes('=') && data.includes('&')) {
        const params = new URLSearchParams(data);
        const formatted: Record<string, unknown> = {};
        params.forEach((value, key) => {
          try {
            formatted[key] = JSON.parse(value);
          } catch {
            formatted[key] = value;
          }
        });
        return JSON.stringify(formatted, null, 2);
      }
      return data;
    }
  }
}
