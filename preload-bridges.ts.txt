// src/preload/monitoring-bridge.ts
import { contextBridge, ipcRenderer } from 'electron';
import { XHRRequest, ResourceEntry } from '../shared/types/session';

declare global {
  interface Window {
    monitorAPI: {
      sendMetrics: (data: XHRRequest | ResourceEntry) => void;
    };
  }
}

contextBridge.exposeInMainWorld('monitorAPI', {
  sendMetrics: (data: XHRRequest | ResourceEntry) => {
    try {
      const safeData = JSON.parse(JSON.stringify(data));
      return ipcRenderer.send('page-metrics', safeData);
    } catch (error) {
      console.error('Error sending metrics:', error);
    }
  }
});

// src/preload/index.ts
import { contextBridge, ipcRenderer } from 'electron';
import { WebContentsResult, IPCRendererHandlers } from '../shared/types/ipc';

declare global {
  interface Window {
    electronAPI: {
      createWebContents: (url: string) => Promise<WebContentsResult>;
      endSession: () => Promise<{ success: boolean }>;
      onPageMetrics: (callback: IPCRendererHandlers['page-metrics']) => void;
      onPageNavigated: (callback: IPCRendererHandlers['page-navigated']) => void;
    };
  }
}

contextBridge.exposeInMainWorld('electronAPI', {
  createWebContents: async (url: string) => {
    return ipcRenderer.invoke('create-web-contents', url);
  },

  endSession: async () => {
    return ipcRenderer.invoke('end-session');
  },

  onPageMetrics: (callback: IPCRendererHandlers['page-metrics']) => {
    return ipcRenderer.on('page-metrics', (_, data) => callback(data));
  },

  onPageNavigated: (callback: IPCRendererHandlers['page-navigated']) => {
    return ipcRenderer.on('page-navigated', (_, url) => callback(url));
  }
});
