// src/main/index.ts
import { app, BrowserWindow } from 'electron';
import { join } from 'path';
import { BrowserManager } from './services/browser-manager';
import { setupBrowserEvents } from './ipc/browser-events';
import { setupMonitoringEvents } from './ipc/monitoring';

let mainWindow: BrowserWindow | null = null;
let browserManager: BrowserManager | null = null;

function createWindow(): void {
  mainWindow = new BrowserWindow({
    width: 1400,
    height: 900,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: join(__dirname, '..', 'preload', 'index.js')
    }
  });

  if (MAIN_WINDOW_WEBPACK_ENTRY) {
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  }

  // Initialize services
  if (mainWindow) {
    browserManager = new BrowserManager(mainWindow);
    setupBrowserEvents(browserManager);
    setupMonitoringEvents(mainWindow);
  }

  mainWindow.on('closed', () => {
    mainWindow = null;
    browserManager = null;
  });
}

// Handle app lifecycle
app.whenReady().then(createWindow);

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// Type declarations for Webpack-injected variables
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
